{"version":3,"file":"filterLayer-7146d358.js","sources":["../../components/core/filterLayer/uniqueValues.js","../../components/core/filterLayer/filterLayer.js"],"sourcesContent":["\n  const getUniqueValues = function(row, filterName, valuesSelect, baseurl, layername) {\n    // if (Alpine.store('filterLayer').currentLayer !== layername) {\n    //   valuesSelect.innerHTML = 'loading'; \n    //   Alpine.store('filterLayer').currentLayer = layername;\n    // }\n  \n    fetch(`${baseurl}/wps?service=WPS&outputFormat=json`, {\n      \"headers\": {\n        \"accept\": \"application/json\",\n        \"accept-language\": \"de-DE,de;q=0.5\",\n        \"content-type\": \"application/xml\",\n      },\n      \"referrer\": \"https://geoserver.dainst.org/catalogue/\",\n      \"body\": `\n      <wps:Execute xmlns:wps=\"http://www.opengis.net/wps/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"1.0.0\" service=\"WPS\" xsi:schemaLocation=\"http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsAll.xsd\">\n        <ows:Identifier xmlns:ows=\"http://www.opengis.net/ows/1.1\">gs:PagedUnique</ows:Identifier>\n        <wps:DataInputs>\n          <wps:Input>\n            <ows:Identifier xmlns:ows=\"http://www.opengis.net/ows/1.1\">features</ows:Identifier>\n            <ows:Title xmlns:ows=\"http://www.opengis.net/ows/1.1\">features</ows:Title>\n            <wps:Data />\n            <wps:Reference xmlns:xlink=\"http://www.w3.org/1999/xlink\" mimeType=\"text/xml\" xlink:href=\"http://geoserver/wfs\" method=\"POST\">\n              <wps:Body>\n                <wfs:GetFeature xmlns:wfs=\"http://www.opengis.net/wfs\" service=\"WFS\" version=\"1.0.0\">\n                  <wfs:Query typeName=\"${layername}\">\n                    <ogc:SortBy xmlns:ogc=\"http://www.opengis.net/ogc\">\n                      <ogc:SortProperty>\n                        <ogc:PropertyName>${filterName}</ogc:PropertyName>\n                      </ogc:SortProperty>\n                    </ogc:SortBy>\n                  </wfs:Query>\n                </wfs:GetFeature>\n              </wps:Body>\n            </wps:Reference>\n          </wps:Input>\n          <wps:Input>\n            <ows:Identifier xmlns:ows=\"http://www.opengis.net/ows/1.1\">fieldName</ows:Identifier>\n            <ows:Title xmlns:ows=\"http://www.opengis.net/ows/1.1\">fieldName</ows:Title>\n            <wps:Data>\n              <wps:LiteralData>${filterName}</wps:LiteralData>\n            </wps:Data>\n          </wps:Input>\n          <wps:Input>\n            <ows:Identifier xmlns:ows=\"http://www.opengis.net/ows/1.1\">maxFeatures</ows:Identifier>\n            <ows:Title xmlns:ows=\"http://www.opengis.net/ows/1.1\">maxFeatures</ows:Title>\n            <wps:Data>\n              <wps:LiteralData>200</wps:LiteralData>\n            </wps:Data>\n          </wps:Input>\n          <wps:Input>\n            <ows:Identifier xmlns:ows=\"http://www.opengis.net/ows/1.1\">startIndex</ows:Identifier>\n            <ows:Title xmlns:ows=\"http://www.opengis.net/ows/1.1\">startIndex</ows:Title>\n            <wps:Data>\n              <wps:LiteralData>0</wps:LiteralData>\n            </wps:Data>\n          </wps:Input>\n        </wps:DataInputs>\n        <wps:ResponseForm>\n          <wps:RawDataOutput mimeType=\"application/json\">\n            <ows:Identifier xmlns:ows=\"http://www.opengis.net/ows/1.1\">result</ows:Identifier>\n          </wps:RawDataOutput>\n        </wps:ResponseForm>\n      </wps:Execute>\n      `,\n      \"method\": \"POST\"\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (!valuesSelect.classList.contains('updated')) {\n        valuesSelect.innerHTML = ''; \n  \n        data.values.forEach(value => {\n          if (value !== \"\") {\n            const option = document.createElement('option');\n            option.value = value;\n            option.textContent = value;\n            valuesSelect.appendChild(option);\n            valuesSelect.classList.add('updated');\n          }\n        });\n      }\n    })\n    .catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  \n  export { getUniqueValues };\n  ","import Alpine from 'alpinejs';\nimport { getUniqueValues } from './uniqueValues.js';\nimport { renderMarkupAndSetPluginReady } from '../../core/helper.js'\n\nconst createForm = async (url, layer) => {\n  const filterStore = Alpine.store(\"filterLayer\");\n  if (filterStore.attributes[layer]) {\n    console.debug(`filter form for ${layer} is already in store`);\n    filterStore.currentFilterFormtoShow = layer;\n    return;\n  }\n\n  const describeFeatureTypeUrl = `${url}?service=WFS&version=2.0.0&request=DescribeFeatureType&typename=${layer}&outputFormat=application/json`;\n  console.log(describeFeatureTypeUrl)\n  try {\n    const response = await fetch(describeFeatureTypeUrl);\n    const properties = await response.json();\n    console.log(properties)\n    // filterStore[\"attributes\"][layer] = properties.featureTypes[0].properties.map(property => property.name);\n    filterStore[\"attributes\"][layer] = filterStore['attribute_set'].filter(item => item.visible).map(item => item.attribute);\n\n    console.log(\"from url it looks like\")\n    console.log(filterStore[\"attributes\"][layer])\n\n    console.log(\"from dataset it looks like\")\n    console.log(filterStore['attribute_set'])\n\n    filterStore.currentFilterFormtoShow = layer;\n  } catch (error) {\n    console.error(`Error fetching data for ${layer}:`, error);\n  }\n}\n\nconst createOffCanvasMarkup = () => {\n\n  let filterOffcanvas = `\n    <div class=\"position-absolute start-0 top-0 bg-white h-100 w-40 p-3 shadow z-2 overflow-auto\" x-transition tabindex=\"-1\" id=\"filterOffcanvas\" aria-labelledby=\"filterOffcanvasLabel\" x-show=\"$store.filterLayer.componentIsActive\">\n      <div class=\"offcanvas-header\">\n        <h5 class=\"offcanvas-title\" id=\"filterOffcanvasLabel\" x-text=\"'Filter: ' + $store.filterLayer.mapName\">Filter</h5>\n        <button type=\"button\" class=\"btn-close text-reset\" @click=\"$store.filterLayer.componentIsActive = false;\"></button>\n      </div>\n\n      <div class=\"offcanvas-body\">\n\n            <template x-for=\"(layerEntry, layerIndex) in Object.entries($store.filterLayer.attributes || {})\" :key=\"layerIndex\">\n            \n              <div :id=\"layerEntry[0]\" x-show=\"layerEntry[0] == $store.filterLayer.currentFilterFormtoShow\">\n                  <div class=\"form-check form-switch\">\n                    <input class=\"form-check-input\" type=\"checkbox\" id=\"or_operator_selector\" @click=\"$store.filterLayer.checkbox_change()\">\n                    <label class=\"form-check-label\" for=\"or_operator_selector\">AND / OR</label>\n                  </div>\n\n                  <hr>\n\n                  <form id=\"filterForm\" @submit.prevent>\n                          <div class=\"row mb-3 mt-3 mx-0\" id=\"filterHeader\">\n                            <div class=\"col-1\">on</div>\n                            <div class=\"col-3\">name</div>\n                            <div class=\"col-3\">operator</div>\n                            <div class=\"col-5\">value</div>\n                          </div>\n                          <template x-for=\"(attribute, attributeIndex) in layerEntry[1]\" :key=\"attributeIndex\">\n                                <div class=\"row mb-3\">\n                                    <div class=\"col-1\">\n                                        <div class=\"form-check\">\n                                            <input class=\"form-check-input js-enableselect\" type=\"checkbox\" :value=\"attribute\" :id=\"'filterCheckbox' + layerEntry[0] + attribute\" @click=\"$store.filterLayer.checkbox_change($el)\">\n                                        </div>\n                                    </div>\n                                    <div class=\"col-3\">\n                                        <input type=\"text\" class=\"form-control form-control-sm\" :value=\"attribute\" :id=\"'input' + layerEntry[0] + attribute\" :name=\"attribute\" readonly></input>\n                                    </div>\n                                    <div class=\"col-3\">\n                                        <select class=\"form-select form-select-sm operators\" :id=\"'operators' + layerEntry[0] + attributeIndex\" disabled>\n                                            <option value=\"=\">is</option>\n                                            <option value=\"<>\">is not</option>\n                                        </select>\n                                    </div>\n                                    <div class=\"col-5\">\n                                        <select class=\"form-select form-select-sm values\" :id=\"'values' + layerEntry[0] + attributeIndex\" disabled>\n                                        </select>\n                                    </div>\n                                </div>\n                          </template>\n                          <button type=\"input\" class=\"btn btn-secondary btn-sm mt-2 float-end ms-2 clearForm\" @click=\"$store.filterLayer.reset_form(layerEntry[0], $store.filterLayer.mapName)\">clear</button>\n                          <button type=\"submit\" class=\"btn btn-secondary btn-sm mt-2 float-end\" @click=\"$store.filterLayer.form_submit(layerEntry[0], $store.filterLayer.mapName)\">filter</button>\n                  </form>\n              </div>\n\n          </template>\n\n      </div>\n  </div>`;\n\n  document.getElementById('map').insertAdjacentHTML('afterend', filterOffcanvas);\n}\n\n\nconst initialize = () => {\n\n  Alpine.store('filterLayer', {\n      componentIsActive: false,\n      attributes: {},\n      currentFilterFormtoShow: \"\",\n      url: \"\",\n      layername: \"\",\n      mapName: \"\",\n      layer: false,\n      activeFilters: [],\n      show_filter: function(layer, layername) {\n        this.componentIsActive = true;\n      },\n      form_submit: function (formID, mapName) {\n        const form = document.getElementById(formID);\n        const enabledFilters = Array.from(form.querySelectorAll('.js-enableselect:checked')).map(checkbox => {\n          const row = checkbox.closest('.row');\n          return {\n            name: row.querySelector('.form-control').value,\n            operator: row.querySelector('.operators').value,\n            value: row.querySelector('.values').value\n          };\n        });\n\n        const filterString = enabledFilters.map(filter => `(\"${filter.name}\"${filter.operator}'${filter.value}')`);\n        const joinStr = form.querySelector('#or_operator_selector').checked ? ' OR ' : ' AND ';\n        const joinedFilters = filterString.join(joinStr);\n        console.log(\"filters: \" + joinedFilters)\n        this.layer.updateParams({ 'CQL_FILTER': joinedFilters });\n\n        // Update the layerVisibility Store so that icons are marked active\n        Alpine.store('layerPanel').activeFilters.push(mapName)\n      },\n\n      checkbox_change: function ($el) {\n        const checkbox = $el;\n        const row = checkbox.closest('.row');\n        const operatorsSelect = row.querySelector('.operators');\n        const valuesSelect = row.querySelector('.values');\n        \n        if (checkbox.checked) {\n          operatorsSelect.removeAttribute('disabled');\n          valuesSelect.removeAttribute('disabled');\n          const filterName = row.querySelector('.form-control').value;\n          getUniqueValues(row, filterName, valuesSelect, this.url, this.layername);\n        } else {\n          operatorsSelect.setAttribute('disabled', true);\n          valuesSelect.setAttribute('disabled', true);\n        }\n      },\n      reset_form: function (formID, mapName) {\n        const formToReset = document.getElementById(formID);\n        formToReset.querySelectorAll('.js-enableselect:checked').forEach(checkbox => checkbox.checked = false);\n        formToReset.querySelectorAll('.values').forEach(select => select.value = '');\n        formToReset.querySelectorAll('.values').forEach(select => select.setAttribute('disabled', true));\n        formToReset.querySelectorAll('.operators').forEach(select => select.setAttribute('disabled', true));\n\n        formToReset.querySelector('#or_operator_selector').checked = false;\n        this.layer.updateParams({ 'CQL_FILTER': '(1=1)' });\n\n        // Update the layerVisibility Store so that icons are marked non active\n        Alpine.store('layerPanel').activeFilters = Alpine.store('layerPanel').activeFilters.filter(function(item) {\n          return item !== mapName\n        })\n\n      }\n    },\n  );\n\n    // Catch the custom event and execute a function to update the legend\n    document.addEventListener('filterPushed', function (event) {\n      console.debug('Custom event \"filterPushed\" caught in filterLayer/filterLayer.js');\n\n      const url = event.detail.instance.getUrl();\n      const layer = event.detail.instance.getParams().LAYERS\n      createForm(url, layer);\n      \n      const filterLayerStore = Alpine.store('filterLayer');\n      filterLayerStore.mapName = event.detail.instance.mapName;\n      filterLayerStore.show_filter(layer, filterLayerStore.mapName);\n      filterLayerStore.layername = layer;\n      filterLayerStore.url = url;\n      filterLayerStore.dataset = event.detail.instance.dataset;\n      filterLayerStore.attribute_set = filterLayerStore.dataset.attribute_set;\n\n      filterLayerStore.layer = event.detail.instance;\n\n      console.warn(filterLayerStore.attribute_set)\n    });\n\n  // [function name that creates the DOM Element, Element to check for presence}\n  const domElementsToCreate = [\n      [createOffCanvasMarkup, '#filterOffcanvas'],\n  ]\n\n  // this function tirggers the rendering and tells main.js that initialization is finished\n  renderMarkupAndSetPluginReady(domElementsToCreate)\n\n};\n\n\nexport { initialize };"],"names":["getUniqueValues","row","filterName","valuesSelect","baseurl","layername","response","data","value","option","error","createForm","url","layer","filterStore","Alpine","describeFeatureTypeUrl","properties","item","createOffCanvasMarkup","filterOffcanvas","initialize","formID","mapName","form","filterString","checkbox","filter","joinStr","joinedFilters","$el","operatorsSelect","formToReset","select","event","filterLayerStore","renderMarkupAndSetPluginReady"],"mappings":"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"}